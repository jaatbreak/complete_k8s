types of secret we have to study :-

Built-in                                               Type	Usage
Opaque	                                          arbitrary user-defined data
kubernetes.io/service-account-token	              ServiceAccount token
kubernetes.io/dockercfg	                          serialized ~/.dockercfg file
kubernetes.io/dockerconfigjson	                   serialized ~/.docker/config.json file
kubernetes.io/basic-auth	                         credentials for basic authentication
kubernetes.io/ssh-auth	                           credentials for SSH authentication
kubernetes.io/tls	                                 data for a TLS client or server
bootstrap.kubernetes.io/                           token	bootstrap token data



#  k create secret generic imp-sec --from-literal=username=Amansingh --from-literal=password=Aman@1234 --from-literal=ubuntu_version=20.8.4
this command first to create the sceret then we will use in the pod
apiVersion: v1
kind: Pod
metadata:
  name: sc1
spec:
  containers:
  - name: sc1
    image: nginx
    env:
    - name: username
      valueFrom:
        secretKeyRef:
          name: db-sceret
          key: username




# CREATE A SECRET FOR THE DOCKER REGISTRY AND PULL THE PRIVATE IMAGE FROM THE DOCKER HUB WITH USING THE DOCKER SECRET CREATED IN CLUSTER OF K8S 


apiVersion: v1
kind: Pod
metadata:
  name: docker-private
  labels: 
    app: test
spec:
  containers:
  - name: docker-image
    image: amansingh12/private:preface
  imagePullSecrets:
  - name: docker-secret


---
apiVersion: v1
kind: Service
metadata:
  name: docker-service
spec:
  selector:
     app: test
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: NodePort


# this is use to send the private or public to the coatiner by using the ssh secret authentication :-

apiVersion: v1
kind: Pod
metadata:
  name: secret-ssh
  labels:
    app: test
spec:
  volumes:
  - name: ssh-keys1
    secret:
      secretName: ssh-keys
      defaultMode: 0600
  containers:
  - name: ssh-test-container
    image: nginx
    volumeMounts:
    - name: ssh-keys1
      readOnly: true
      # container will see /root/.ssh/id_rsa as usual:
      mountPath: "/root/data"
    

## if when u want  to store some root credential or any type data you can use the basic authentication processor to mount the volume inside the container
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
type: kubernetes.io/basic-auth
stringData:
    username: QW1hblNpbmdo
    password: U2h5YW1AMTIz
    contact: ODk1NTUwMzg1Mw==
---
apiVersion: v1
kind: Pod
metadata:
  name: secret-auth
  labels:
    app: test
spec:
  volumes:
  - name: basic-auth1
    secret:
      secretName: basic-auth
      defaultMode: 0600
  containers:
  - name: ssh-test-container1
    image: nginx
    volumeMounts:
    - name: basic-auth1
      readOnly: true
      # container will see /root/.ssh/id_rsa as usual:
      mountPath: "/root/data"





##To create a tls secret in the kubernetes cluster :-
1. openssl genrsa -des3 -out my.key 2048
2. openssl req -key my.key -new -out my.csr
3.  openssl x509 -signkey my.key -in my.csr -req -days 365 -out my.crt
4.  kubectl create secret tls my-tls --key=/home/ubuntu/tls/my.key --cert=/home/ubuntu/tls/my.crt


## use the Command to creat tls :-
 kubectl create secret  tls my-tls --key=path od the key --cert=path of the crt





          
